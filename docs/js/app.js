// This file is required by the index.html file and will
// be executed in the renderer process for that window.
// All of the Node.js APIs are available in this process.
// Define a "Person" class that tracks its own name and children, and has a method to add a new child
var Project, Task, TaskList, viewModel;

Task = function(task) {
  this.text = ko.observable(task);
};

TaskList = function(name, tasks) {
  this.name = name;
  this.tasks = ko.observableArray(tasks);
};

// @addTask = ((task) ->
//   @tasks.push new Task(task)
//   return
// ).bind(this)
Project = function(name, tasklists) {
  this.name = name;
  this.tasklists = tasklists;
  // @addList = (->
  //   @tasklists.push new TaskList()
  //   return
  // ).bind(this)
  this.counttasks = (function() {
    return tasklists.reduce(function(x, y) {
      x += y.tasks.length;
      return x;
    }, {});
  }).bind(this);
};


// The view model is an abstract description of the state of the UI, but without any knowledge of the UI technology (HTML)
viewModel = {
  showPage: "dashboard-projects",
  showHeader: true,
  projects: [
    new Project('Build Time Machine',
    [new TaskList('DeLorean',
    ['Construct Flux Capacitor',
    'Get Plutonium'])]),
    // new Project('Load Dishwasher')
    // new Project('Hackathon', [
    //   'Name Team'
    //   'Decide Project'
    // ])
    new Project('Find Treasure')
  ],
  showRenderTimes: ko.observable(false)
};

ko.applyBindings(viewModel);

// ---
// generated by js2coffee 2.2.0
